[project]
name = "fastapi-celery-app"
version = "0.1.0"
description = "FastAPI + Celery + Docker application"
requires-python = ">=3.12"

[tool.taskipy.tasks]
start = "uvicorn app.main:app --host 0.0.0.0 --port 8060 --reload"
worker = "celery -A app.celery_app worker --loglevel=info"
migrate = "alembic upgrade head"
test = "pytest -v"
test-cov = "pytest --cov=app --cov-report=html --cov-report=term"
lint = "ruff check ."
format = "ruff format ."
lint-fix = "ruff check . --fix"

[tool.ruff]
line-length = 100
target-version = "py312"
exclude = [
    ".git",
    ".venv",
    "venv",
    "__pycache__",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
    "build",
    "dist",
    "*.egg-info",
]

[tool.ruff.lint]
# Enable comprehensive rule sets
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "ERA",    # eradicate
    "PD",     # pandas-vet
    "PL",     # pylint
    "TRY",    # tryceratops
    "RUF",    # ruff-specific rules
]

ignore = [
    "TRY003",   # Avoid specifying long messages outside exception class
    "PLR0913",  # Too many arguments to function call
    "PLR2004",  # Magic value used in comparison
    "ISC001",   # Single line implicit string concatenation (conflicts with formatter)
]

# Allow fix for all enabled rules (when `--fix` is provided)
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["app"]
force-sort-within-sections = true

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.pylint]
max-args = 10
max-branches = 15
max-returns = 6
max-statements = 50

[tool.pytest.ini_options]
testpaths = ["tests"]
asyncio_mode = "auto"
